{"version":3,"sources":["bomb.png","components/cell/Cell.tsx","components/gameboard/GameBoard.js"],"names":["Cell","memo","cell","rowIndex","colIndex","callback","useState","isFlipped","setFlipped","useEffect","className","onClick","src","bomb","width","height","alt","GameBoard","grid","setGame","useContext","gameConfig","config","dispatch","visitedCells","gameStatus","newGrid","countBombsNearCells","getInitialGameBoard","gridSize","m","n","bombInTheGame","createGameStateAction","GAME_STATE_CHANGED","GAME_STATUS","GAME_WON","processVisitedCell","GAME_IN_PROGRESS","GAME_LOST","VISITED_CELL","map","row","index","cellIndex"],"mappings":"2MAAe,G,MAAA,IAA0B,kCC2B1BA,EAvBFC,gBAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,SAAoB,EAC/BC,oBAAS,GADsB,mBACxDC,EADwD,KAC7CC,EAD6C,KAG/DC,qBAAU,WACFF,GACAF,EAASH,KACd,CAACK,IAKJ,OACI,qBAAKG,UAAU,gBAAgBC,QAAS,WAHxCH,GAAW,IAGX,SACI,sBAAKE,UAAU,wBAAf,UACI,qBAAKA,UAAS,gBAAWH,EAAY,4BAA8B,MACnE,qBAAKG,UAAS,eAAUH,EAAY,2BAA6B,IAAjE,UACe,IAAVL,EAAc,qBAAKU,IAAKC,EAAMC,MAAM,MAAMC,OAAO,MAAMC,IAAI,SAAYd,GADAC,EAAWC,W,cCXjGa,EAAYhB,gBAAK,WAAO,IAAD,EACDK,mBAAS,IADR,mBAClBY,EADkB,KACZC,EADY,OAE8BC,qBAAWC,KAA1DC,EAFiB,EAEjBA,OAAQC,EAFS,EAETA,SAAUC,EAFD,EAECA,aAAcC,EAFf,EAEeA,WAExChB,qBAAU,WACN,IAAMiB,EAAUC,YAAoBC,YAAoBN,IACxDH,EAAQO,KACT,IAEHjB,qBAAU,WACFe,IAAkBF,EAAOO,SAASC,EAAIR,EAAOO,SAASE,EAAKT,EAAOU,eAClET,EAASU,YAAsBC,IAAoBC,IAAYC,aAEpE,CAACZ,IAEJ,IAAMa,EAAqB,SAACnC,GACxB,GAAIuB,IAAeU,IAAYG,iBAAkB,CAC7C,IAAc,IAAVpC,EAEA,YADAqB,EAASU,YAAsBC,IAAoBC,IAAYI,YAGnEhB,EAASU,YAAsBO,IAAc,SAIrD,OAAO,yBAAS9B,UAAU,qCAAnB,SAECQ,EAAKuB,KAAI,SAACC,EAAKC,GACX,OAAO,qBAAKjC,UAAU,gBAAf,SACFgC,EAAID,KAAI,SAACvC,EAAM0C,GACZ,OAAO,cAAC,EAAD,CAAM1C,KAAMA,EAAMG,SAAUgC,EAAoBlC,SAAUwC,EAAOvC,SAAUwC,GAA3E,UAA8FD,EAA9F,YAAuGC,QAF3ED,WAW5C1B","file":"static/js/3.4d89e468.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bomb.852d33c1.png\";","import React, { memo, useState, useEffect } from 'react';\nimport './Cell.css';\nimport bomb from '../../bomb.png';\n\nconst Cell = memo(({ cell, rowIndex, colIndex, callback }: any) => {\n    const [isFlipped, setFlipped] = useState(false);\n\n    useEffect(() => {\n        if (isFlipped)\n            callback(cell);\n    }, [isFlipped]);\n\n    const processClick = () => {\n        setFlipped(true);\n    }\n    return (\n        <div className=\"cellContainer\" onClick={() => processClick()}>\n            <div className=\"cellContainer-flipper\">\n                <div className={`front ${isFlipped ? \"cellContainer-front--flip\" : \"\"}`}></div>\n                <div className={`back ${isFlipped ? \"cellContainer-back--flip\" : \"\"}`} key={rowIndex + colIndex}>\n                    {cell === -1 ? <img src={bomb} width=\"50%\" height=\"50%\" alt=\"bomb\" /> : cell}\n                </div>\n            </div>\n        </div>\n    )\n})\n\nexport default Cell;","import React, { useContext, useState, memo, useEffect } from 'react';\nimport './GameBoard.css';\nimport { gameConfig } from '../../store/store';\nimport getInitialGameBoard, { countBombsNearCells } from '../../utils/utils';\nimport Cell from '../cell/Cell';\nimport { GAME_STATE_CHANGED, VISITED_CELL, createGameStateAction } from '../../models/action';\nimport { GAME_STATUS } from '../../constants/constant';\n\nconst GameBoard = memo(() => {\n    const [grid, setGame] = useState([]);\n    const { config, dispatch, visitedCells, gameStatus } = useContext(gameConfig);\n\n    useEffect(() => {\n        const newGrid = countBombsNearCells(getInitialGameBoard(config))\n        setGame(newGrid);\n    }, []);\n\n    useEffect(() => {\n        if (visitedCells === (config.gridSize.m * config.gridSize.n) - config.bombInTheGame) {\n            dispatch(createGameStateAction(GAME_STATE_CHANGED, GAME_STATUS.GAME_WON));\n        }\n    }, [visitedCells]);\n\n    const processVisitedCell = (cell) => {\n        if (gameStatus === GAME_STATUS.GAME_IN_PROGRESS) {\n            if (cell === -1) { //Lost the game\n                dispatch(createGameStateAction(GAME_STATE_CHANGED, GAME_STATUS.GAME_LOST));\n                return;\n            }\n            dispatch(createGameStateAction(VISITED_CELL, null));\n        }\n    }\n\n    return <section className=\"gameBoard margin-top-20 fadeEffect\">\n        {\n            grid.map((row, index) => {\n                return <div className=\"gameBoard-row\" key={index}>\n                    {row.map((cell, cellIndex) => {\n                        return <Cell cell={cell} callback={processVisitedCell} rowIndex={index} colIndex={cellIndex} key={`${index}_${cellIndex}`} />\n                    })}\n                </div>\n            })\n        }\n\n    </section>\n})\n\nexport default GameBoard;"],"sourceRoot":""}